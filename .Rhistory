col.names = c('activityId', 'activity'))
activityLabelsDT <- data.table(activityLabels, key = c('activityId'))
remove(activityLabels)
# featuresDT: the names of the observation features (values). 561 of them
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'))
# Train data set
# trainActivitiesDT: data.table. The activity for an observation.
trainActivities <- read.table('UCI HAR Dataset/train/y_train.txt', col.names = c('activityId'))
# row number = observation id, population = train
trainActivities$observation <- 1:nrow(trainActivities)
trainActivities$population <- 'train'
trainActivitiesDT <- data.table(trainActivities, key = c('activityId'))
remove(trainActivities)
# trainObservations: data.table.
#   merge trainActivitiesCodedDT and activityLabelsDT on the activityId to get coded activities
trainObservations <- merge(trainActivitiesDT, activityLabelsDT)
remove(trainActivitiesDT)
setkey(trainObservations, observation)
# trainSubjectsDT: The subject for an observation
trainSubjects <- read.table('UCI HAR Dataset/train/subject_train.txt', col.names = c('subjectId'))
trainSubjects$observation <- 1:nrow(trainSubjects)
trainSubjectsDT <- data.table(trainSubjects, key = c('observation'))
remove(trainSubjects)
# add the subjectIds to the observations
trainObservations <- merge(trainObservations, trainSubjectsDT)
remove(trainSubjectsDT)
# now the features for the observations
trainFeatures <- read.table('UCI HAR Dataset/train/X_train.txt', col.names = features$feature)
trainFeatures$observation <- 1:nrow(trainFeatures)
trainFeaturesDT <- data.table(trainFeatures, key = c('observation'))
remove(trainFeatures)
# add the featrures to the observations
trainObservations <- merge(trainObservations, trainFeaturesDT)
remove(trainFeaturesDT)
str(trainObservations)
str(trainObservations)
# Reference data
# activityLabelsDT:  data.table. activity labels, keyed by the activity id
activityLabels <- read.table('UCI HAR Dataset/activity_labels.txt',
col.names = c('activityId', 'activity'), colClasses = c('factor', 'factor'))
activityLabelsDT <- data.table(activityLabels, key = c('activityId'))
remove(activityLabels)
# featuresDT: the names of the observation features (values). 561 of them
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'))
# Train data set
# trainActivitiesDT: data.table. The activity for an observation.
trainActivities <- read.table('UCI HAR Dataset/train/y_train.txt',
col.names = c('activityId'), colClasses = c('factor'))
# row number = observation id, population = train
trainActivities$observation <- 1:nrow(trainActivities)
trainActivities$population <- as.factor('train')
trainActivitiesDT <- data.table(trainActivities, key = c('activityId'))
remove(trainActivities)
# trainObservations: data.table.
#   merge trainActivitiesCodedDT and activityLabelsDT on the activityId to get coded activities
trainObservations <- merge(trainActivitiesDT, activityLabelsDT)
remove(trainActivitiesDT)
setkey(trainObservations, observation)
# trainSubjectsDT: The subject for an observation
trainSubjects <- read.table('UCI HAR Dataset/train/subject_train.txt', col.names = c('subjectId'))
trainSubjects$observation <- 1:nrow(trainSubjects)
trainSubjectsDT <- data.table(trainSubjects, key = c('observation'))
remove(trainSubjects)
# add the subjectIds to the observations
trainObservations <- merge(trainObservations, trainSubjectsDT)
remove(trainSubjectsDT)
# now the features for the observations
trainFeatures <- read.table('UCI HAR Dataset/train/X_train.txt', col.names = features$feature)
trainFeatures$observation <- 1:nrow(trainFeatures)
trainFeaturesDT <- data.table(trainFeatures, key = c('observation'))
remove(trainFeatures)
# add the featrures to the observations
trainObservations <- merge(trainObservations, trainFeaturesDT)
remove(trainFeaturesDT)
library(data.table)
# Reference data
# activityLabelsDT:  data.table. activity labels, keyed by the activity id
activityLabels <- read.table('UCI HAR Dataset/activity_labels.txt',
col.names = c('activityId', 'activity'), colClasses = c('factor', 'factor'))
activityLabelsDT <- data.table(activityLabels, key = c('activityId'))
remove(activityLabels)
# featuresDT: the names of the observation features (values). 561 of them
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'))
# Train data set
# trainActivitiesDT: data.table. The activity for an observation.
trainActivities <- read.table('UCI HAR Dataset/train/y_train.txt',
col.names = c('activityId'), colClasses = c('factor'))
# row number = observation id, population = train
trainActivities$observation <- 1:nrow(trainActivities)
trainActivities$population <- as.factor('train')
trainActivitiesDT <- data.table(trainActivities, key = c('activityId'))
remove(trainActivities)
# trainObservations: data.table.
#   merge trainActivitiesCodedDT and activityLabelsDT on the activityId to get coded activities
trainObservations <- merge(trainActivitiesDT, activityLabelsDT)
remove(trainActivitiesDT)
setkey(trainObservations, observation)
# trainSubjectsDT: The subject for an observation
trainSubjects <- read.table('UCI HAR Dataset/train/subject_train.txt', col.names = c('subjectId'))
trainSubjects$observation <- 1:nrow(trainSubjects)
trainSubjectsDT <- data.table(trainSubjects, key = c('observation'))
remove(trainSubjects)
# add the subjectIds to the observations
trainObservations <- merge(trainObservations, trainSubjectsDT)
remove(trainSubjectsDT)
# now the features for the observations
trainFeatures <- read.table('UCI HAR Dataset/train/X_train.txt', col.names = features$feature)
trainFeatures$observation <- 1:nrow(trainFeatures)
trainFeaturesDT <- data.table(trainFeatures, key = c('observation'))
remove(trainFeatures)
# add the featrures to the observations
trainObservations <- merge(trainObservations, trainFeaturesDT)
remove(trainFeaturesDT)
str(trainObservations)
str(features)
str(features$feature)
features$feature[grep(features$feature, pattern = '-mean()')]
features$feature[grep(features$feature, pattern = 'std()')]
features$feature[grep(features$feature, pattern = 'std()|mean()')]
features$feature[grep(features$feature, 'std()|mean()')]
ifelse(grep(features$feature, pattern = 'std()|mean()'), features$feature, NULL)
ifelse(grep(features$feature, pattern = 'std()|mean()'), as.character(features$feature), NULL)
ifelse(grep(features$feature, pattern = 'std()|mean()'), as.character(features$feature), "")
ifelse(grep(features$feature, pattern = 'std()|mean()'), as.character(features$feature), NULL)
s <- ifelse(grep(features$feature, pattern = 'std()|mean()'), as.character(features$feature), NULL)
View(s)
View(features)
s <- ifelse(grep(as.character(features$feature), pattern = 'std()|mean()'), as.character(features$feature), NULL)
str(s)
grep('std()|mean()', features$feature)
s <- ifelse(grep('std()|mean()', as.character(features$feature)), as.character(features$feature), NULL)
s
features$feature
features$feature[,grep('std()|mean()', features$feature)]
str(features$feature)
str(as.character(features$feature))
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'),
colClasses = c('integer', 'character'))
features <- data.table(features, key = c('featureId'))
View(features)
View(features)
str(features$feature)
featuresColClasses <- ifelse(grep('std()|mean()', features$feature), features$feature, NULL)
ifelse(grep('std()|mean()', features$feature), features$feature, NULL)
ifelse(grep('std|mean', features$feature), features$feature, NULL)
str(features)
features$feature
grep("fbody", features$feature)
grep("fBody", features$feature)
grep("arCoeff", features$feature)
grep("arCoeff", features$feature, value=TRUE)
grep("std()|mean()", features$feature, value=TRUE)
ifelse(grep('std()|mean()', features$feature), features$feature, NULL)
ifelse(grep('std()|mean()', features$feature)) > 0, features$feature, "NO")
ifelse(grep("std()|mean()", features$feature) > 0, features$feature, "NO")
result <- c()
for (feature in features$feature) {
add = NULL
if (grep('std()|mean()', feature) > 0) {
add = feature
}
result[length(result) + 1] = add
}
result <- c()
for (feature in features$feature) {
add = NULL
if (length(grep('std()|mean()', feature)) > 0) {
add = feature
}
result[length(result) + 1] = add
}
result <- c()
for (feature in features$feature) {
add = "NULL"
if (length(grep('std()|mean()', feature)) > 0) {
add = feature
}
result[length(result) + 1] = add
}
ifelse(length(grep("std()|mean()", features$feature)) > 0, features$feature, "NULL")
View(result)
result
result <- c()
for (feature in features$feature) {
add = "NULL"
if (length(grep('std\(\)|mean\(\)', feature)) > 0) {
add = feature
}
result[length(result) + 1] = add
}
result <- c()
for (feature in features$feature) {
add = "NULL"
if (length(grep('std\\()|mean\\()', feature)) > 0) {
add = feature
}
result[length(result) + 1] = add
}
result
ifelse(length(grep("std\\()|mean\\()", features$feature)) > 0, features$feature, "NULL")
str(features$feature)
x <- features$feature
str(x)
ifelse(length(grep("std\\()|mean\\()", x)) > 0, x, "NULL")
ifelse(grepl("std\\()|mean\\()", features$feature)) > 0, features$feature, "NULL")
ifelse(grepl("std\\()|mean\\()", features$feature), features$feature, "NULL")
library(data.table)
# Reference data
# activityLabels:  data.table. activity labels, keyed by the activity id
activityLabels <- read.table('UCI HAR Dataset/activity_labels.txt',
col.names = c('activityId', 'activity'), colClasses = c('factor', 'factor'))
activityLabels <- data.table(activityLabels, key = c('activityId'))
# featuresDT: the names of the observation features (values). 561 of them
#             will be used to name the feature columns from the observation files
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'),
colClasses = c('integer', 'character'))
features <- data.table(features, key = c('featureId'))
# featuresColClasses: vector of colClasses for loading feature files
#                     we want to focus on mean and standard deviation features
#                     which have names containing '-mean()' and '-std()'
featuresColClasses <- ifelse(grepl("std\\()|mean\\()", features$feature), features$feature, "NULL")
# Train data set
# trainActivitiesDT: data.table. The activity for an observation.
trainActivities <- read.table('UCI HAR Dataset/train/y_train.txt',
col.names = c('activityId'), colClasses = c('factor'))
# row number = observation id
trainActivities$observation <- 1:nrow(trainActivities)
# population = train (for when we merge with the test dataset )
#               observations will be unique by population and observation
trainActivities$population <- as.factor('train')
trainActivities <- data.table(trainActivities, key = c('activityId'))
# trainObservations: data.table.
#   merge trainActivities and activityLabels on the activityId to get coded activities
trainObservations <- merge(trainActivities, activityLabels)
remove(trainActivities)
# beyond here, we will be merging based on the observation id
setkey(trainObservations, observation)
# trainSubjects: The subject for an observation
trainSubjects <- read.table('UCI HAR Dataset/train/subject_train.txt', col.names = c('subjectId'))
trainSubjects$observation <- 1:nrow(trainSubjects)
trainSubjects <- data.table(trainSubjects, key = c('observation'))
# add the subjectIds to the observations
trainObservations <- merge(trainObservations, trainSubjects)
remove(trainSubjects)
# now the features for the observations
trainFeatures <- read.table('UCI HAR Dataset/train/X_train.txt',
col.names = features$feature,
colClasses = featuresColClasses)
trainFeatures$observation <- 1:nrow(trainFeatures)
trainFeatures <- data.table(trainFeatures, key = c('observation'))
# add the featrures to the observations
trainObservations <- merge(trainObservations, trainFeatures)
remove(trainFeatures)
library(data.table)
# Reference data
# activityLabels:  data.table. activity labels, keyed by the activity id
activityLabels <- read.table('UCI HAR Dataset/activity_labels.txt',
col.names = c('activityId', 'activity'), colClasses = c('factor', 'factor'))
activityLabels <- data.table(activityLabels, key = c('activityId'))
# featuresDT: the names of the observation features (values). 561 of them
#             will be used to name the feature columns from the observation files
features <- read.table('UCI HAR Dataset/features.txt', col.names = c('featureId', 'feature'),
colClasses = c('integer', 'character'))
features <- data.table(features, key = c('featureId'))
# featuresColClasses: vector of colClasses for loading feature files
#                     we want to focus on mean and standard deviation features
#                     which have names containing '-mean()' and '-std()'
featuresColClasses <- ifelse(grepl("std\\()|mean\\()", features$feature), "numeric", "NULL")
# Train data set
# trainActivitiesDT: data.table. The activity for an observation.
trainActivities <- read.table('UCI HAR Dataset/train/y_train.txt',
col.names = c('activityId'), colClasses = c('factor'))
# row number = observation id
trainActivities$observation <- 1:nrow(trainActivities)
# population = train (for when we merge with the test dataset )
#               observations will be unique by population and observation
trainActivities$population <- as.factor('train')
trainActivities <- data.table(trainActivities, key = c('activityId'))
# trainObservations: data.table.
#   merge trainActivities and activityLabels on the activityId to get coded activities
trainObservations <- merge(trainActivities, activityLabels)
remove(trainActivities)
# beyond here, we will be merging based on the observation id
setkey(trainObservations, observation)
# trainSubjects: The subject for an observation
trainSubjects <- read.table('UCI HAR Dataset/train/subject_train.txt', col.names = c('subjectId'))
trainSubjects$observation <- 1:nrow(trainSubjects)
trainSubjects <- data.table(trainSubjects, key = c('observation'))
# add the subjectIds to the observations
trainObservations <- merge(trainObservations, trainSubjects)
remove(trainSubjects)
# now the features for the observations
trainFeatures <- read.table('UCI HAR Dataset/train/X_train.txt',
col.names = features$feature,
colClasses = featuresColClasses)
trainFeatures$observation <- 1:nrow(trainFeatures)
trainFeatures <- data.table(trainFeatures, key = c('observation'))
# add the featrures to the observations
trainObservations <- merge(trainObservations, trainFeatures)
remove(trainFeatures)
str(trainObservations)
?merge
remove(trainObservations)
source("run_analysis.R"")
""
source("run_analysis.R")
testResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'test')
testResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'test')
source("run_analysis.R")
testResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'test')
testResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'test')
source("run_analysis.R")
testResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'test')
View(testResult)
View(testResult)
trainResult  <- getDataSet('UCI HAR Dataset', activityLabels, features, featuresColClasses, 'train')
result  <- getMergedDataSet()
source("run_analysis.R")
result  <- getMergedDataSet()
source("run_analysis.R")
source("run_analysis.R")
result  <- getMergedDataSet()
source("run_analysis.R")
result  <- getMergedDataSet()
View(result)
View(result)
object.size(result)
library(dplyr)
(dt1 <- data.table(A = letters[1:10], X = 1:10, key = "A"))
(dt2 <- data.table(A = letters[5:14], Y = 1:10, key = "A"))
merge(dt1, dt2)
merge(dt1, dt2, all = TRUE)
dt2 <- data.table(A = letters[5:14], X = 1:10, key = "A")
merge(dt1, dt2)
merge(dt1, dt2, all=TRUE)
source("run_analysis.R")
result  <- getMergedDataSet()
?summarize
features <- read.table(paste0(directory, '/features.txt'), col.names = c('featureId', 'feature'),
colClasses = c('integer', 'character'))
features <- data.table(features, key = c('featureId'))
?aggregate
directory = 'UCI HAR Dataset'
features <- read.table(paste0(directory, '/features.txt'), col.names = c('featureId', 'feature'),
colClasses = c('integer', 'character'))
featuresColNames <- features$feature[grepl("std\\()|mean\\()", features$feature)]
print(featuresColNames)
aggregate(x = mergedDataSet[featuresColNames],
by = mergedDataSet[c("population", "subjectId", "activity")],
FUN = mean)
aggregate(x = result[featuresColNames],
by = result[c("population", "subjectId", "activity")],
FUN = mean)
setkey(result, c("population", "subjectId", "activity"))
?setkey
setkeyv(result, c("population", "subjectId", "activity"))
aggregate(x = result[featuresColNames],
by = result[c("population", "subjectId", "activity")],
FUN = mean)
str(result[featuresColNames])
key(result)
result[featuresColNames]
aggregate(featuresColNames ~ popuation + subjectId + activity, data=result, FUN=mean)
aggregate(featuresColNames ~ population + subjectId + activity, data=result, FUN=mean)
aggregate(tBodyAcc-mean()-X ~ population + subjectId + activity, data=result, FUN=mean)
aggregate('tBodyAcc-mean()-X' ~ population + subjectId + activity, data=result, FUN=mean)
aggregate(. ~ population + subjectId + activity,
data=result[append(c("population", "subjectId", "activity"), featuresColNames)],
mean)
c("population", "subjectId", "activity"), featuresColNames)
append(c("population", "subjectId", "activity"), featuresColNames)
featuresColNames <- ifelse(grepl("std\\()|mean\\()", features$feature),
ifelse(grepl("-std\\()-", features$feature), sub("-std\\()-", "Std_"),
ifelse(grepl("-mean\\()-", features$feature), sub("-mean\\()-", "Mean_"),
ifelse(grepl("std\\()", features$feature), sub("std\\()", "Std"),
ifelse(grepl("mean\\()", features$feature), sub("mean\\()", "Mean"),
features$feature)))))
featuresColNames <- ifelse(grepl("std\\()|mean\\()", features$feature),
ifelse(grepl("-std\\()-", features$feature), sub("-std\\()-", "Std_", features$feature),
ifelse(grepl("-mean\\()-", features$feature), sub("-mean\\()-", "Mean_", features$feature),
ifelse(grepl("std\\()", features$feature), sub("std\\()", "Std", features$feature),
ifelse(grepl("mean\\()", features$feature), sub("mean\\()", "Mean", features$feature),
features$feature)))))
featuresColNames <- ifelse(grepl("std\\()|mean\\()", features$feature),
ifelse(grepl("-std\\()-", features$feature), sub("-std\\()-", "Std_", features$feature),
ifelse(grepl("-mean\\()-", features$feature), sub("-mean\\()-", "Mean_", features$feature),
ifelse(grepl("std\\()", features$feature), sub("std\\()", "Std", features$feature),
ifelse(grepl("mean\\()", features$feature), sub("mean\\()", "Mean", features$feature),
features$feature)))), features$feature)
featuresColNames
source("run_analysis.R")
result  <- getMergedDataSet()
source("run_analysis.R")
result  <- getMergedDataSet()
aggregate(tBodyAccMean_X ~ population + subjectId + activity, data=result, mean)
aggregate(. ~ population + subjectId + activity,
data=result[append(c("population", "subjectId", "activity"), featuresColNames)],
mean)
setkeyv(result, c("population", "subjectId", "activity"))
aggregate(. ~ population + subjectId + activity,
data=result[append(c("population", "subjectId", "activity"), featuresColNames)],
mean)
result[append(c("population", "subjectId", "activity"), featuresColNames)]
result[append(c("population", "subjectId", "activity"), featuresColNames),]
result[,append(c("population", "subjectId", "activity"), featuresColNames)]
source("run_analysis.R")
View(result)
result  <- getMergedDataSet()
View(result)
aggregate(tBodyAcc_Mean_X ~ population + subjectId + activity, data=result, mean)
aggregate(tBodyAcc_Mean_X + tBodyAcc_Mean_Y ~ population + subjectId + activity, data=result, mean)
aggregate(. ~ population + subjectId + activity, data=result, mean)
agg <- aggregate(. ~ population + subjectId + activity, data=result, mean)
View(agg)
View(agg)
head(result[, -(observation, activityId)])
head(result[, c("observation", "activityId") := NULL])
agg <- aggregate(. ~ population + subjectId + activity, data=result, mean)
str(result)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result, "")
View(agg)
View(agg)
result  <- getMergedDataSet()
source("run_analysis.R")
source("run_analysis.R")
agg <- getAggregatedResult(result)
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
result[, c("observation", "activityId") := NULL]
agg <- getAggregatedResult(result)
result  <- getMergedDataSet()
result[, c("observation", "activityId") := NULL]
View(result)
View(result)
agg<- aggregate(. ~ population + subjectId + activity,
data=result,
mean)
View(agg)
View(agg)
result  <- getMergedDataSet()
result[, c("population", "observation", "activityId") := NULL]
agg<- aggregate(. ~ subjectId + activity,
data=result,
mean)
View(agg)
View(agg)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
View(agg)
View(agg)
?setnames
colnames(agg)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
source("run_analysis.R")
agg <- getAggregatedResult(result)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
source("run_analysis.R")
result  <- getMergedDataSet()
agg <- getAggregatedResult(result)
View(result)
View(result)
source("run_analysis.R")
result  <- getMergedDataSet()
View(result)
View(result)
agg <- getAggregatedResult(result)
View(agg)
View(agg)
require(devtools)
source_gist(4497585)
?unzip
?write.csv
write.csv(result, file='data/output/UCI_HAR_tidy.csv')
dir.create('data/output')
dir.create('data')
dir.create('data/output')
?dir.create
dir.create('d/d', recursive = TRUE)
write.csv(result, file='data/output/UCI_HAR_tidy.csv')
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
View(UCI_HAR_DataTable)
View(UCI_HAR_DataTable)
View(UCI_HAR_DataTable)
source("run_analysis.R")
head(UCI_HAR_DataTable[, 1:5], n=5)
summary(UCI_HAR_DataTable)
str(UCI_HAR_DataTable)
UCI_HAR_DataTable <- getFull_UCI_HAR_DataTable(datasetDirectory)
summary(UCI_HAR_DataTable)
head(UCI_HAR_DataTable,n = 10)
head(UCI_HAR_DataTable[,1:7],n = 5)
head(UCI_HAR_DataTable[,1:7])
str(UCI_HAR_DataTable)
UCI_HAR_Subject_Activity <- getUCI_HAR_SubjectActivitySummaryDataTable(UCI_HAR_DataTable)
str(UCI_HAR_Subject_Activity)
